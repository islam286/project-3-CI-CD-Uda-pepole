version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
# DM from slack for the failure at any step of the pipeline
  notify_on_failure:
    steps:
      - slack/notify:
          channel: C03FUNUEMC7
          event: fail
          template: basic_fail_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<< parameters.Workflow_ID >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>


  install_ansible:
    description: "Installs Ansible on Ubuntu images"
    steps:
      - run: 
          name: "Install Ansible"
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_awscli:
    description: "Installs AWS_CLI"
    steps:
      - run: 
          name: "Install AWS CLI"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build f  ront-end
          command: |
            cd frontend
            npm install
            npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend 
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key:
           frontend-build
      - run:
          name: front-end unit test
          command: |
            cd frontend
            npm install
            npm run test
      -  notify_on_failure


  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: 
            backend-build
      - run:
          name: back-end unit test
          command: |
            cd backend
            npm install
            npm run test
      - notify_on_failure

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key:
            frontend-build
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical 
            npm audit fix --audit-level=critical
      - notify_on_failure
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key:
            backend-build
      - run:
          name: back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical 
            npm audit fix --force --audit-level=critical           
            npm audit fix --audit-level=critical
      - notify_on_failure

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: to install tar and gzip
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople 
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:2022.04
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["74:fb:ac:e6:c4:f9:79:f9:ad:65:da:2a:b1:27:7e:8c"]
      - install_ansible
      - install_awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment    
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
        name: Run migrations
        command: |
          cd backend
          npm install
          # Run and save the migration output
          npm run migrations > migrations_dump.txt
      - run:
        name: Send migration status to kvdb.io OR memstash.io
        command: |   
          if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
          then
              curl https://kvdb.io/4JxzV4bJVyYY4dXsZYaikP/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
          fi
      - destroy-environment      
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
  notify_on_success:
    docker:
      - image: cimg/base:2022.04
    steps:
      - slack/notify:
          channel: C03ES8F89DW
          event: pass
          template: success_tagged_deploy_1
            
          
workflows:
  my-workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure] 
      - run-migrations:
          requires: [configure-infrastructure]         
      # #- notify_on_success:
      #     requires:            
      #       - build-frontend
      #       - build-backend
      #       - test-frontend
      #       - test-backend
      #       - scan-backend
      #       - scan-frontend
